package com.example.bti;import java.io.*;import java.net.URL;import java.util.Arrays;import java.util.ResourceBundle;import java.util.function.UnaryOperator;import java.util.regex.Pattern;//import com.sun.javafx.stage.EmbeddedWindow;import javafx.application.Platform;import javafx.beans.value.ChangeListener;import javafx.beans.value.ObservableValue;import javafx.css.converter.StringConverter;import javafx.fxml.FXMLLoader;import javafx.scene.Node;import javafx.scene.Parent;import javafx.scene.Scene;import javafx.scene.control.*;import javafx.scene.input.KeyCode;import javafx.scene.input.KeyCodeCombination;import javafx.scene.input.KeyCombination;import javafx.scene.layout.HBox;import javafx.scene.layout.VBox;import javafx.stage.Stage;import javafx.event.ActionEvent;import javafx.fxml.FXML;import javafx.fxml.FXMLLoader;import javafx.scene.Scene;import javafx.scene.layout.AnchorPane;import javafx.scene.text.Text;import javafx.stage.Stage;public class Controller {    @FXML    private ResourceBundle resources;    @FXML    private URL location;    @FXML    private Text BTIname;    @FXML    private Text BTIname2;    @FXML    private Button PrintButton;    @FXML    private Button SaveButton;    @FXML    private Button CleanButton;    @FXML    private TextField FIOzakInput;    @FXML    private TextField PhoneInput;    @FXML    private TextField FizUrInput;    @FXML    private TextField NumBankInput;    @FXML    private TextField BankInput;    @FXML    private TextField AddressInput;    @FXML    private TextField DistrictInput;    @FXML    private TextField DocNameInput;    @FXML    private TextField DateRequestInput;    @FXML    private TextField SrochnoeInput;    @FXML    private TextField DateVidachiInput;    @FXML    private TextField DateTechInput;    @FXML    private TextField PriceDocInput;    @FXML    private TextField TimeTechInput;    @FXML    private TextField FIOnachInput;    @FXML    private TextField DatePeredachiInput;    @FXML    private TextField FIOispInput;    @FXML    private TextField FIOTechInput;    @FXML    private TextField PayInput;    @FXML    private TextField PaySumInput;    @FXML    private TextField DatePayInput;    @FXML    private TextField DocIssuedInput;    @FXML    private TextField PrimechanieInput;    @FXML    private Text ErrorText;    @FXML    private Text DoneText;    @FXML    private MenuButton DistrictMenu;    @FXML    private MenuButton FizUrMenu;    @FXML    private MenuButton SrochnoeMenu;    @FXML    private MenuButton PayMenu;    @FXML    private MenuButton DocIssuedMenu;    @FXML    private MenuButton FIOispMenu;    @FXML    private MenuButton FIOTechMenu;    @FXML    private Text numReqText;    @FXML    private TextField DateRequestInput1;    @FXML    private TextField DateRequestInput2;    @FXML    private TextField DateRequestInput3;    @FXML    private TextField DateVidachiInput1;    @FXML    private TextField DateVidachiInput2;    @FXML    private TextField DateVidachiInput3;    @FXML    private TextField DateTechInput1;    @FXML    private TextField DateTechInput2;    @FXML    private TextField DateTechInput3;    @FXML    private TextField DatePeredachiInput1;    @FXML    private TextField DatePeredachiInput2;    @FXML    private TextField DatePeredachiInput3;    @FXML    private TextField DatePayInput1;    @FXML    private TextField DatePayInput2;    @FXML    private TextField DatePayInput3;    @FXML    void initialize() {        DocNameInput.setText("Заявка на ТП");        FIOnachInput.setText("Осипов Дмитрий Михайлович");        ErrorText.setVisible(false);        DoneText.setVisible(false);        Platform.runLater(FIOzakInput::requestFocus);        DatabaseHandler dbHandler = new DatabaseHandler();        FIOzakInput.setOnKeyPressed(event -> {            if(event.getCode().equals(KeyCode.ENTER)){                PhoneInput.requestFocus();            }        });PhoneInput.setOnKeyPressed(event -> {            if(event.getCode().equals(KeyCode.ENTER)){                FizUrMenu.requestFocus();                FizUrMenu.show();            }        });BankInput.setOnKeyPressed(event -> {            if(event.getCode().equals(KeyCode.ENTER)){                NumBankInput.requestFocus();            }        });NumBankInput.setOnKeyPressed(event -> {            if(event.getCode().equals(KeyCode.ENTER)){                AddressInput.requestFocus();            }        });AddressInput.setOnKeyPressed(event -> {            if(event.getCode().equals(KeyCode.ENTER)){                DistrictMenu.requestFocus();                DistrictMenu.show();            }        });        DateRequestInput1.setOnKeyPressed(event ->{            if(event.getCode().equals(KeyCode.ENTER)){                DateRequestInput2.requestFocus();            }        });        DateRequestInput2.setOnKeyPressed(event ->{            if(event.getCode().equals(KeyCode.ENTER)){                DateRequestInput3.requestFocus();            }        });        DateRequestInput3.setOnKeyPressed(event ->{            if(event.getCode().equals(KeyCode.ENTER)){                SrochnoeMenu.requestFocus();                SrochnoeMenu.show();            }        });        DateVidachiInput1.setOnKeyPressed(event -> {            if(event.getCode().equals(KeyCode.ENTER)){                DateVidachiInput2.requestFocus();            }        });        DateVidachiInput2.setOnKeyPressed(event -> {            if(event.getCode().equals(KeyCode.ENTER)){                DateVidachiInput3.requestFocus();            }        });        DateVidachiInput3.setOnKeyPressed(event -> {            if(event.getCode().equals(KeyCode.ENTER)){                PriceDocInput.requestFocus();            }        });        PriceDocInput.setOnKeyPressed(event -> {            if(event.getCode().equals(KeyCode.ENTER)){                DateTechInput1.requestFocus();            }        });        DateTechInput1.setOnKeyPressed(event -> {            if(event.getCode().equals(KeyCode.ENTER)){                DateTechInput2.requestFocus();            }        });        DateTechInput2.setOnKeyPressed(event -> {            if(event.getCode().equals(KeyCode.ENTER)){                DateTechInput3.requestFocus();            }        });        DateTechInput3.setOnKeyPressed(event -> {            if(event.getCode().equals(KeyCode.ENTER)){                TimeTechInput.requestFocus();            }        });        TimeTechInput.setOnKeyPressed(event -> {            if(event.getCode().equals(KeyCode.ENTER)){                FIOispMenu.requestFocus();                FIOispMenu.show();            }        });        DatePeredachiInput1.setOnKeyPressed(event -> {            if(event.getCode().equals(KeyCode.ENTER)){                DatePeredachiInput2.requestFocus();            }        });DatePeredachiInput2.setOnKeyPressed(event -> {            if(event.getCode().equals(KeyCode.ENTER)){                DatePeredachiInput3.requestFocus();            }        });DatePeredachiInput3.setOnKeyPressed(event -> {            if(event.getCode().equals(KeyCode.ENTER)){                FIOTechMenu.requestFocus();                FIOTechMenu.show();            }        });//        FIOTechMenu.setOnKeyPressed(event -> {//            if(event.getCode().equals(KeyCode.ENTER)){//                PayMenu.requestFocus();//                PayMenu.show();//            }//        });        DatePayInput1.setOnKeyPressed(event -> {            if(event.getCode().equals(KeyCode.ENTER)){                DatePayInput2.requestFocus();            }        });DatePayInput2.setOnKeyPressed(event -> {            if(event.getCode().equals(KeyCode.ENTER)){                DatePayInput3.requestFocus();            }        });DatePayInput3.setOnKeyPressed(event -> {            if(event.getCode().equals(KeyCode.ENTER)){                PaySumInput.requestFocus();            }        });PaySumInput.setOnKeyPressed(event -> {            if(event.getCode().equals(KeyCode.ENTER)){                DocIssuedMenu.requestFocus();                DocIssuedMenu.show();            }        });PrimechanieInput.setOnKeyPressed(event -> {            if(event.getCode().equals(KeyCode.ENTER)){                FIOzakInput.requestFocus();            }        });        // ОГРАНИЧЕНИЯ ВВОДА        FIOzakInput.textProperty().addListener((observable, oldValue, newValue) -> {            if (!newValue.matches("\\sа-яА-Я")) {                FIOzakInput.setText(newValue.replaceAll("[^\\sа-яА-Я ё]", ""));            }        });        PhoneInput.textProperty().addListener((observable, oldValue, newValue) -> {            if (!newValue.matches("\\d*") ) {                PhoneInput.setText(newValue.replaceAll("[^\\d]", ""));            }        });        FizUrInput.textProperty().addListener((observable, oldValue, newValue) -> {            if (!newValue.matches("\\sа-яА-Я*")) {                FizUrInput.setText(newValue.replaceAll("[^\\sа-яА-Я]", ""));            }        });        BankInput.textProperty().addListener((observable, oldValue, newValue) -> {            if (!newValue.matches("\\sа-яА-Яa-zA-Z*")) {                BankInput.setText(newValue.replaceAll("[^\\sа-яА-Яa-zA-Z ё]", ""));            }        });        NumBankInput.textProperty().addListener((observable, oldValue, newValue) -> {            if (!newValue.matches("\\d*")) {                NumBankInput.setText(newValue.replaceAll("[^\\d]", ""));            }        });        DistrictInput.textProperty().addListener((observable, oldValue, newValue) -> {            if (!newValue.matches("\\sа-яА-Я*")) {                DistrictInput.setText(newValue.replaceAll("[^\\sа-яА-Я]", ""));            }        });        DateRequestInput1.textProperty().addListener((observable, oldValue, newValue) -> {            if (!newValue.matches("\\d*") ) {                DateRequestInput1.setText(newValue.replaceAll("[^\\d]", ""));            }        });        DateRequestInput2.textProperty().addListener((observable, oldValue, newValue) -> {            if (!newValue.matches("\\d*") ) {                DateRequestInput2.setText(newValue.replaceAll("[^\\d]", ""));            }        });        DateRequestInput3.textProperty().addListener((observable, oldValue, newValue) -> {            if (!newValue.matches("\\d*") ) {                DateRequestInput3.setText(newValue.replaceAll("[^\\d]", ""));            }        });        DocNameInput.textProperty().addListener((observable, oldValue, newValue) -> {            if (!newValue.matches("\\sа-яА-Я*")) {                DocNameInput.setText(newValue.replaceAll("[^\\sа-яА-Я ё]", ""));            }        });        SrochnoeInput.textProperty().addListener((observable, oldValue, newValue) -> {            if (!newValue.matches("\\sа-яА-Я*")) {                SrochnoeInput.setText(newValue.replaceAll("[^\\sа-яА-Я]", ""));            }        });        DateVidachiInput1.textProperty().addListener((observable, oldValue, newValue) -> {            if (!newValue.matches("\\d*") ) {                DateVidachiInput1.setText(newValue.replaceAll("[^\\d]", ""));            }        });        DateVidachiInput2.textProperty().addListener((observable, oldValue, newValue) -> {            if (!newValue.matches("\\d*") ) {                DateVidachiInput2.setText(newValue.replaceAll("[^\\d]", ""));            }        });        DateVidachiInput3.textProperty().addListener((observable, oldValue, newValue) -> {            if (!newValue.matches("\\d*") ) {                DateVidachiInput3.setText(newValue.replaceAll("[^\\d]", ""));            }        });        PriceDocInput.textProperty().addListener((observable, oldValue, newValue) -> {            if (!newValue.matches("\\d*")) {                PriceDocInput.setText(newValue.replaceAll("[^\\d]", ","));            }        });        DateTechInput1.textProperty().addListener((observable, oldValue, newValue) -> {            if (!newValue.matches("\\d*") ) {                DateTechInput1.setText(newValue.replaceAll("[^\\d]", ""));            }        });        DateTechInput2.textProperty().addListener((observable, oldValue, newValue) -> {            if (!newValue.matches("\\d*") ) {                DateTechInput2.setText(newValue.replaceAll("[^\\d]", ""));            }        });        DateTechInput3.textProperty().addListener((observable, oldValue, newValue) -> {            if (!newValue.matches("\\d*") ) {                DateTechInput3.setText(newValue.replaceAll("[^\\d]", ""));            }        });        TimeTechInput.textProperty().addListener((observable, oldValue, newValue) -> {            if (!newValue.matches("\\d*")) {                TimeTechInput.setText(newValue.replaceAll("[^\\d]", ":"));            }        });        FIOnachInput.textProperty().addListener((observable, oldValue, newValue) -> {            if (!newValue.matches("\\sа-яА-ЯZ*")) {                FIOnachInput.setText(newValue.replaceAll("[^\\sа-яА-Я ё]", ""));            }        });        FIOispInput.textProperty().addListener((observable, oldValue, newValue) -> {            if (!newValue.matches("\\sа-яА-Я*")) {                FIOispInput.setText(newValue.replaceAll("[^\\sа-яА-Я ё]", ""));            }        });        DatePeredachiInput1.textProperty().addListener((observable, oldValue, newValue) -> {            if (!newValue.matches("\\d*") ) {                DatePeredachiInput1.setText(newValue.replaceAll("[^\\d]", ""));            }        });DatePeredachiInput2.textProperty().addListener((observable, oldValue, newValue) -> {            if (!newValue.matches("\\d*") ) {                DatePeredachiInput2.setText(newValue.replaceAll("[^\\d]", ""));            }        });DatePeredachiInput3.textProperty().addListener((observable, oldValue, newValue) -> {            if (!newValue.matches("\\d*") ) {                DatePeredachiInput3.setText(newValue.replaceAll("[^\\d]", ""));            }        });        FIOTechInput.textProperty().addListener((observable, oldValue, newValue) -> {            if (!newValue.matches("\\sа-яА-Я*")) {                FIOTechInput.setText(newValue.replaceAll("[^\\sа-яА-Я ё]", ""));            }        });        PayInput.textProperty().addListener((observable, oldValue, newValue) -> {            if (!newValue.matches("\\sа-яА-Я*")) {                PayInput.setText(newValue.replaceAll("[^\\sа-яА-Я]", ""));            }        });        DatePayInput1.textProperty().addListener((observable, oldValue, newValue) -> {            if (!newValue.matches("\\d*") ) {                DatePayInput1.setText(newValue.replaceAll("[^\\d]", ""));            }        });DatePayInput2.textProperty().addListener((observable, oldValue, newValue) -> {            if (!newValue.matches("\\d*") ) {                DatePayInput2.setText(newValue.replaceAll("[^\\d]", ""));            }        });DatePayInput3.textProperty().addListener((observable, oldValue, newValue) -> {            if (!newValue.matches("\\d*") ) {                DatePayInput3.setText(newValue.replaceAll("[^\\d]", ""));            }        });        PaySumInput.textProperty().addListener((observable, oldValue, newValue) -> {            if (!newValue.matches("\\d*")) {                PaySumInput.setText(newValue.replaceAll("[^\\d]", ","));            }        });        DocIssuedInput.textProperty().addListener((observable, oldValue, newValue) -> {            if (!newValue.matches("\\sа-яА-Я*")) {                DocIssuedInput.setText(newValue.replaceAll("[^\\sа-яА-Я]", ""));            }        });        PrimechanieInput.textProperty().addListener((observable, oldValue, newValue) -> {            if (!newValue.matches("\\sа-яА-Я*")) {                PrimechanieInput.setText(newValue.replaceAll("[^\\sа-яА-Я ё]", ""));            }        });        // Физическое/Юридическое лицо (МЕНЮ)        MenuItem item1 = new MenuItem("Физическое");        MenuItem item2 = new MenuItem("Юридическое");        FizUrMenu.getItems().addAll(item1, item2);        item1.setOnAction(event -> {            FizUrInput.setText("Физическое");            BankInput.requestFocus();        });        item2.setOnAction(event -> {            FizUrInput.setText("Юридическое");            BankInput.requestFocus();        });        // Район объекта (МЕНЮ)        MenuItem item3 = new MenuItem("Центральный");        MenuItem item4 = new MenuItem("Зареченский");        MenuItem item5 = new MenuItem("Пролетарский");        MenuItem item6 = new MenuItem("Советский");        MenuItem item7 = new MenuItem("Привокзальный");        DistrictMenu.getItems().addAll(item3, item4, item5, item6, item7);        item3.setOnAction(event -> {            DistrictInput.setText("Центральный");            DateRequestInput1.requestFocus();        });        item4.setOnAction(event -> {            DistrictInput.setText("Зареченский");            DateRequestInput1.requestFocus();        });        item5.setOnAction(event -> {            DistrictInput.setText("Пролетарский");            DateRequestInput1.requestFocus();        });        item6.setOnAction(event -> {            DistrictInput.setText("Советский");            DateRequestInput1.requestFocus();        });        item7.setOnAction(event -> {            DistrictInput.setText("Привокзальный");            DateRequestInput1.requestFocus();        });        // Срочное изготовление (МЕНЮ)        MenuItem item8 = new MenuItem("Да");        MenuItem item9 = new MenuItem("Нет");        SrochnoeMenu.getItems().addAll(item8, item9);        item8.setOnAction(event -> {            SrochnoeInput.setText("Да");            DateVidachiInput1.requestFocus();        });        item9.setOnAction(event -> {            SrochnoeInput.setText("Нет");            DateVidachiInput1.requestFocus();        });        // Оплата наличными (МЕНЮ)        MenuItem item10 = new MenuItem("Да");        MenuItem item11 = new MenuItem("Нет");        PayMenu.getItems().addAll(item10, item11);        item10.setOnAction(event -> {            PayInput.setText("Да");            DatePayInput1.requestFocus();        });        item11.setOnAction(event -> {            PayInput.setText("Нет");            DatePayInput1.requestFocus();        });        // Документ выдан (МЕНЮ)        MenuItem item12 = new MenuItem("Да");        MenuItem item13 = new MenuItem("Нет");        DocIssuedMenu.getItems().addAll(item12, item13);        item12.setOnAction(event -> {            DocIssuedInput.setText("Да");            PrimechanieInput.requestFocus();        });        item13.setOnAction(event -> {            DocIssuedInput.setText("Нет");            PrimechanieInput.requestFocus();        });        // ФИО исполнителя (МЕНЮ)        MenuItem item14 = new MenuItem("Коротков Валентин Степанович");        MenuItem item15 = new MenuItem("Сошкина Мария Павловна");        MenuItem item16 = new MenuItem("Новиков Андрей Николаевич");        FIOispMenu.getItems().addAll(item14, item15, item16);        item14.setOnAction(event -> {            FIOispInput.setText("Коротков Валентин Степанович");            DatePeredachiInput1.requestFocus();        });        item15.setOnAction(event -> {            FIOispInput.setText("Сошкина Мария Павловна");            DatePeredachiInput1.requestFocus();        });        item16.setOnAction(event -> {            FIOispInput.setText("Новиков Андрей Николаевич");            DatePeredachiInput1.requestFocus();        });        // ФИО техника (МЕНЮ)        MenuItem item17 = new MenuItem("Попов Игорь Дмитриевич");        MenuItem item18 = new MenuItem("Симонов Анатолий Илотов");        MenuItem item19 = new MenuItem("Чокин Артур Иванович");        FIOTechMenu.getItems().addAll(item17, item18, item19);        item17.setOnAction(event -> {            FIOTechInput.setText("Попов Игорь Дмитриевич");            PayMenu.requestFocus();        });        item18.setOnAction(event -> {            FIOTechInput.setText("Симонов Анатолий Илотов");            PayMenu.requestFocus();        });        item19.setOnAction(event -> {            FIOTechInput.setText("Чокин Артур Иванович");            PayMenu.requestFocus();        });        SaveButton.setOnAction(event -> {            String datereq1 = DateRequestInput1.getText();            String datereq2 = DateRequestInput2.getText();            String datereq3 = DateRequestInput3.getText();            String datevid1 = DateVidachiInput1.getText();            String datevid2 = DateVidachiInput2.getText();            String datevid3 = DateVidachiInput3.getText();            String datetec1 = DateTechInput1.getText();            String datetec2 = DateTechInput2.getText();            String datetec3 = DateTechInput3.getText();            String dateper1 = DatePeredachiInput1.getText();            String dateper2 = DatePeredachiInput2.getText();            String dateper3 = DatePeredachiInput3.getText();            String datepay1 = DatePayInput1.getText();            String datepay2 = DatePayInput2.getText();            String datepay3 = DatePayInput3.getText();            String FIOzakText = FIOzakInput.getText().trim(); //trim удаляет лишние пробелы            String PhoneText = PhoneInput.getText().trim();            String FizUrText = FizUrInput.getText().trim();            String BankText = BankInput.getText().trim();            String NumBankText = NumBankInput.getText().trim();            String AdressText = AddressInput.getText().trim();            String DistrictText = DistrictInput.getText().trim();            String DateRequestText = datereq3 + "." + datereq2 + "." + datereq1;            String DocNameText = DocNameInput.getText().trim();            String SrochnoeText = SrochnoeInput.getText().trim();            String DateVidachiText = datevid3 + "." + datevid2 + "." + datevid1;            String PriceDocText = PriceDocInput.getText().trim();            String DateTechText = datetec3 + "." + datetec2 + "." + datetec1;            String TimeTechText = TimeTechInput.getText().trim();            String FIOnachText = FIOnachInput.getText().trim();            String FIOispText = FIOispInput.getText().trim();            String DatePeredachiText = dateper3 + "." + dateper2 + "." + dateper1;            String FIOTechText = FIOTechInput.getText().trim();            String PayText = PayInput.getText().trim();            String DatePayText = datepay3 + "." + datepay2 + "." + datepay1;            String PaySumText = PaySumInput.getText().trim();            String DocIssuedText = DocIssuedInput.getText().trim();            String PrimechanieText = PrimechanieInput.getText().trim();            if(     !FIOzakText.equals("") && !PhoneText.equals("") && !FizUrText.equals("") &&                    !BankText.equals("") && !NumBankText.equals("") && !AdressText.equals("") && !DistrictText.equals("") &&                    !DateRequestInput1.equals("") && !DateRequestInput2.equals("") && !DateRequestInput3.equals("") &&                    !DateRequestText.equals("") &&                    !DocNameText.equals("") && !SrochnoeText.equals("") &&                    !DateVidachiInput1.equals("") && !DateVidachiInput2.equals("") && !DateVidachiInput3.equals("") &&                    !DateVidachiText.equals("") &&                    !PriceDocText.equals("") &&                    !DateTechInput1.equals("") && !DateTechInput2.equals("") && !DateTechInput3.equals("") &&                    !DateTechText.equals("") &&                    !TimeTechText.equals("") && !FIOnachText.equals("") &&                    !FIOispText.equals("") &&                    !DatePeredachiInput1.equals("") && !DatePeredachiInput2.equals("") && !DatePeredachiInput3.equals("") &&                    !DatePeredachiText.equals("") &&                    !FIOTechText.equals("") && !PayText.equals("") &&                    !DatePayInput1.equals("") && !DatePayInput2.equals("") && !DatePayInput3.equals("") &&                    !DatePayText.equals("") &&                    !PaySumText.equals("") && !DocIssuedText.equals("") && !PrimechanieText.equals(""))            {                File file = new File("src/main/java/com/example/bti/num_req.txt");                FileReader fr = null;                try {                    fr = new FileReader(file);                } catch (FileNotFoundException e) {                    e.printStackTrace();                }                BufferedReader reader = new BufferedReader(fr);                String stringLine = null;                try {                    stringLine = reader.readLine();                } catch (IOException e) {                    e.printStackTrace();                }                int intLine = Integer.parseInt(stringLine);                intLine++;                String numReq = Integer.toString(intLine);                try {                    reader.close();                } catch (IOException e) {                    e.printStackTrace();                }                FileWriter fw = null;                try {                    fw = new FileWriter(file);                } catch (IOException e) {                    e.printStackTrace();                }                BufferedWriter writer = new BufferedWriter(fw);                try {                    writer.write(numReq);                } catch (IOException e) {                    e.printStackTrace();                }                try {                    writer.close();                } catch (IOException e) {                    e.printStackTrace();                }                numReqText.setText("Номер заявки:\n" + numReq);                numReqText.setVisible(true);                //====================================================                dbHandler.addRequest(numReq, FIOzakText, PhoneText, FizUrText,                        BankText, NumBankText, AdressText, DistrictText, DateRequestText,                        DocNameText, SrochnoeText, DateVidachiText, PriceDocText, DateTechText,                        TimeTechText, FIOnachText, FIOispText, DatePeredachiText, FIOTechText,                        PayText, DatePayText, PaySumText, DocIssuedText, PrimechanieText);                //====================================================                if (DistrictText.equals("Центральный")){                    dbHandler.addCentralniy(numReq, FIOzakText, PhoneText, FizUrText,                            BankText, NumBankText, AdressText, DistrictText, DateRequestText,                            DocNameText, SrochnoeText, DateVidachiText, PriceDocText, DateTechText,                            TimeTechText, FIOnachText, FIOispText, DatePeredachiText, FIOTechText,                            PayText, DatePayText, PaySumText, DocIssuedText, PrimechanieText);                }                if (DistrictText.equals("Зареченский")){                    dbHandler.addZarechenskiy(numReq, FIOzakText, PhoneText, FizUrText,                            BankText, NumBankText, AdressText, DistrictText, DateRequestText,                            DocNameText, SrochnoeText, DateVidachiText, PriceDocText, DateTechText,                            TimeTechText, FIOnachText, FIOispText, DatePeredachiText, FIOTechText,                            PayText, DatePayText, PaySumText, DocIssuedText, PrimechanieText);                }                if (DistrictText.equals("Пролетарский")){                    dbHandler.addProletarskiy(numReq, FIOzakText, PhoneText, FizUrText,                            BankText, NumBankText, AdressText, DistrictText, DateRequestText,                            DocNameText, SrochnoeText, DateVidachiText, PriceDocText, DateTechText,                            TimeTechText, FIOnachText, FIOispText, DatePeredachiText, FIOTechText,                            PayText, DatePayText, PaySumText, DocIssuedText, PrimechanieText);                }                if (DistrictText.equals("Советский")){                    dbHandler.addSovetskiy(numReq, FIOzakText, PhoneText, FizUrText,                            BankText, NumBankText, AdressText, DistrictText, DateRequestText,                            DocNameText, SrochnoeText, DateVidachiText, PriceDocText, DateTechText,                            TimeTechText, FIOnachText, FIOispText, DatePeredachiText, FIOTechText,                            PayText, DatePayText, PaySumText, DocIssuedText, PrimechanieText);                }                if (DistrictText.equals("Привокзальный")){                    dbHandler.addPrivokzalniy(numReq, FIOzakText, PhoneText, FizUrText,                            BankText, NumBankText, AdressText, DistrictText, DateRequestText,                            DocNameText, SrochnoeText, DateVidachiText, PriceDocText, DateTechText,                            TimeTechText, FIOnachText, FIOispText, DatePeredachiText, FIOTechText,                            PayText, DatePayText, PaySumText, DocIssuedText, PrimechanieText);                }                //====================================================                if (FIOispText.equals("Коротков Валентин Степанович")){                    dbHandler.addIspKorotkov(numReq, FIOzakText, PhoneText, FizUrText,                            BankText, NumBankText, AdressText, DistrictText, DateRequestText,                            DocNameText, SrochnoeText, DateVidachiText, PriceDocText, DateTechText,                            TimeTechText, FIOnachText, FIOispText, DatePeredachiText, FIOTechText,                            PayText, DatePayText, PaySumText, DocIssuedText, PrimechanieText);                }                if (FIOispText.equals("Сошкина Мария Павловна")){                    dbHandler.addIspSoshkina(numReq, FIOzakText, PhoneText, FizUrText,                            BankText, NumBankText, AdressText, DistrictText, DateRequestText,                            DocNameText, SrochnoeText, DateVidachiText, PriceDocText, DateTechText,                            TimeTechText, FIOnachText, FIOispText, DatePeredachiText, FIOTechText,                            PayText, DatePayText, PaySumText, DocIssuedText, PrimechanieText);                }                if (FIOispText.equals("Новиков Андрей Николаевич")){                    dbHandler.addIspNovikov(numReq, FIOzakText, PhoneText, FizUrText,                            BankText, NumBankText, AdressText, DistrictText, DateRequestText,                            DocNameText, SrochnoeText, DateVidachiText, PriceDocText, DateTechText,                            TimeTechText, FIOnachText, FIOispText, DatePeredachiText, FIOTechText,                            PayText, DatePayText, PaySumText, DocIssuedText, PrimechanieText);                }                //====================================================                if (FIOTechText.equals("Попов Игорь Дмитриевич")){                    dbHandler.addTechPopov(numReq, FIOzakText, PhoneText, FizUrText,                            BankText, NumBankText, AdressText, DistrictText, DateRequestText,                            DocNameText, SrochnoeText, DateVidachiText, PriceDocText, DateTechText,                            TimeTechText, FIOnachText, FIOispText, DatePeredachiText, FIOTechText,                            PayText, DatePayText, PaySumText, DocIssuedText, PrimechanieText);                }                if (FIOTechText.equals("Симонов Анатолий Илотов")){                    dbHandler.addTechSimonov(numReq, FIOzakText, PhoneText, FizUrText,                            BankText, NumBankText, AdressText, DistrictText, DateRequestText,                            DocNameText, SrochnoeText, DateVidachiText, PriceDocText, DateTechText,                            TimeTechText, FIOnachText, FIOispText, DatePeredachiText, FIOTechText,                            PayText, DatePayText, PaySumText, DocIssuedText, PrimechanieText);                }                if (FIOTechText.equals("Чокин Артур Иванович")){                    dbHandler.addTechChokin(numReq, FIOzakText, PhoneText, FizUrText,                            BankText, NumBankText, AdressText, DistrictText, DateRequestText,                            DocNameText, SrochnoeText, DateVidachiText, PriceDocText, DateTechText,                            TimeTechText, FIOnachText, FIOispText, DatePeredachiText, FIOTechText,                            PayText, DatePayText, PaySumText, DocIssuedText, PrimechanieText);                }                ErrorText.setVisible(false);                DoneText.setVisible(true);                System.out.println("Пользователь добавлен в базу данных");            } else {                ErrorText.setVisible(true);                DoneText.setVisible(false);                System.out.println("Не все поля заполнены");            }        });        CleanButton.setOnAction(event -> {            FIOzakInput.setText(""); PhoneInput.setText(""); FizUrInput.setText("");            NumBankInput.setText(""); BankInput.setText(""); AddressInput.setText("");            DistrictInput.setText("");//            DocNameInput.setText("");            DateRequestInput1.setText(""); DateRequestInput2.setText(""); DateRequestInput3.setText("");            SrochnoeInput.setText("");            DateVidachiInput1.setText(""); DateVidachiInput2.setText(""); DateVidachiInput3.setText("");            DateTechInput1.setText(""); DateTechInput2.setText(""); DateTechInput3.setText("");            PriceDocInput.setText(""); TimeTechInput.setText(""); FIOispInput.setText("");            DatePeredachiInput1.setText(""); DatePeredachiInput2.setText(""); DatePeredachiInput3.setText("");            FIOTechInput.setText(""); PayInput.setText("");            PaySumInput.setText("");            DatePayInput1.setText(""); DatePayInput2.setText(""); DatePayInput3.setText("");            DocIssuedInput.setText("");            PrimechanieInput.setText("");            ErrorText.setVisible(false);            DoneText.setVisible(false);            numReqText.setVisible(false);            FIOzakInput.requestFocus();        });    }}